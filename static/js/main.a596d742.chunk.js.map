{"version":3,"sources":["assests/images/x.png","assests/images/o.png","assests/images/settings.svg","components/settings/settings.js","views/HomePage/HomePage.js","views/HomePage/index.js","views/ChooseSide/ChooseSide.js","views/ChooseSide/index.js","views/GameScreen/GameScreen.js","views/GameScreen/index.js","router/appRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Settings","className","src","require","alt","HomePage","props","redirectToChooseSide","history","push","onClick","ChooseSide","id","type","name","GameScreen","Container","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,+GCA3CD,EAAOC,QAAU,IAA0B,sC,6ICa5BC,MAXf,WACE,OACE,yBAAKC,UAAU,qBACf,yBACEC,IAAKC,EAAQ,IACbC,IAAI,e,KC6BKC,IClCAA,EDEf,SAAkBC,GAChB,SAASC,IACPD,EAAME,QAAQC,KAAK,gBAErB,OACE,yBAAKR,UAAU,UACb,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,cACb,yBACEC,IAAKC,EAAQ,IACbC,IAAI,QACJH,UAAU,UAEZ,yBACEC,IAAKC,EAAQ,IACbC,IAAI,OACJH,UAAU,YAGd,wBAAIA,UAAU,SAAd,yBACA,4BAAQA,UAAU,aAAaS,QAASH,GAAxC,WAGA,4BAAQN,UAAU,cAAcS,QAASH,GAAzC,iBAGA,kBAAC,EAAD,S,MEaOI,ICzCAA,EDEf,SAAoBL,GAClB,OACE,yBAAKL,UAAU,UACb,yBAAKA,UAAU,sCACb,wBAAIA,UAAU,SAAd,kBACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,iCACb,yBACEC,IAAKC,EAAQ,IACbC,IAAI,QACJH,UAAU,gBAEZ,2BAAOA,UAAU,SACf,2BAAOW,GAAG,OAAOC,KAAK,QAAQC,KAAK,SACnC,0BAAMb,UAAU,SACd,0BAAMA,UAAU,aAItB,yBAAKA,UAAU,4BACb,yBACEC,IAAKC,EAAQ,IACbC,IAAI,OACJH,UAAU,gBAEZ,2BAAOA,UAAU,SACf,2BAAOW,GAAG,OAAOC,KAAK,QAAQC,KAAK,SACnC,0BAAMb,UAAU,SACd,0BAAMA,UAAU,cAKxB,4BAAQA,UAAU,QAAQS,QAAS,WAAKJ,EAAME,QAAQC,KAAK,WAA3D,e,MEpBOM,ICfAA,EDKf,SAAoBT,GAClB,OACE,yBAAKL,UAAU,UACb,yBAAKA,UAAU,sCACb,kBAAC,EAAD,SEIOe,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,eAAeC,UAAWR,IAC5C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,QAAQC,UAAWJ,MCC5BK,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,QCKcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,gBACzB,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a596d742.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.ff2919c6.png\";","module.exports = __webpack_public_path__ + \"static/media/o.0aeae337.png\";","module.exports = __webpack_public_path__ + \"static/media/settings.05560aeb.svg\";","import React from \"react\";\nimport \"./settings.css\"\nfunction Settings() {\n  return (\n    <div className=\"setting-container\">\n    <img\n      src={require(\"../../assests/images/settings.svg\")}\n      alt=\"settings\"\n    />\n  </div>\n  );\n}\n\nexport default Settings\n","import React from \"react\";\nimport Settings from \"../../components/settings/settings\";\nimport \"../../assests/css/common.css\"\n\nfunction HomePage(props) {\n  function redirectToChooseSide() {\n    props.history.push(\"/choose-side\");\n  }\n  return (\n    <div className=\"parent\">\n      <div className=\"flex align-center column container\">\n        <div className=\"flex mb-15\">\n          <img\n            src={require(\"../../assests/images/x.png\")}\n            alt=\"cross\"\n            className=\"icons\"\n          />\n          <img\n            src={require(\"../../assests/images/o.png\")}\n            alt=\"zero\"\n            className=\"icons \"\n          />\n        </div>\n        <h3 className=\"mb-10\">Choose your play mode</h3>\n        <button className=\"mb-3 theme\" onClick={redirectToChooseSide}>\n          With AI\n        </button>\n        <button className=\"white mb-12\" onClick={redirectToChooseSide}>\n          With a friend\n        </button>\n        <Settings/>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import HomePage from \"./HomePage\";\n\nexport default HomePage;\n","import React from \"react\";\nimport \"./ChooseSide.css\";\nimport \"../../assests/css/common.css\"\n\nfunction ChooseSide(props) {\n  return (\n    <div className=\"parent\">\n      <div className=\"flex align-center column container\">\n        <h3 className=\"mb-20\">Pick your side</h3>\n        <div className=\"flex mb-20\">\n          <div className=\"mr-5 flex column align-center\">\n            <img\n              src={require(\"../../assests/images/x.png\")}\n              alt=\"cross\"\n              className=\"icons mb-12\"\n            />\n            <label className=\"radio\">\n              <input id=\"type\" type=\"radio\" name=\"type\" />\n              <span className=\"outer\">\n                <span className=\"inner\"></span>\n              </span>\n            </label>\n          </div>\n          <div className=\"flex column align-center\">\n            <img\n              src={require(\"../../assests/images/o.png\")}\n              alt=\"zero\"\n              className=\"icons mb-12\"\n            />\n            <label className=\"radio\">\n              <input id=\"type\" type=\"radio\" name=\"type\" />\n              <span className=\"outer\">\n                <span className=\"inner\"></span>\n              </span>\n            </label>\n          </div>\n        </div>\n        <button className=\"white\" onClick={()=>{props.history.push(\"/game\")}}>Continue</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChooseSide;\n","import ChooseSide from \"./ChooseSide\";\n\nexport default ChooseSide;\n","import React from \"react\";\nimport Settings from \"../../components/settings/settings\";\n\n//styles\nimport \"../../assests/css/common.css\";\nimport \"./GameScreen.css\";\n\nfunction GameScreen(props) {\n  return (\n    <div className=\"parent\">\n      <div className=\"flex align-center column container\">\n        <Settings />\n      </div>\n    </div>\n  );\n}\n\nexport default GameScreen;\n","import GameScreen from \"./GameScreen\";\n\nexport default GameScreen;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"../views/HomePage\";\nimport ChooseSide from \"../views/ChooseSide\";\nimport GameScreen from \"../views/GameScreen\";\n\nfunction Container() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route exact path=\"/choose-side\" component={ChooseSide} />\n      <Route exact path=\"/game\" component={GameScreen} />\n    </Switch>\n  );\n}\nexport default Container;\n","import React from \"react\";\nimport \"./App.css\";\nimport AppRouter from \"./router/appRouter\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}